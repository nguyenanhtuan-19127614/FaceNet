import tensorflow as tf
from tensorflow import keras

from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

from keras.models import Model
from keras.layers import Dense, Lambda, Flatten, Input
from keras.applications import VGG16

import numpy as np
import cv2
from PIL import Image
from modelHandler import FacenetModel

def _base_network():
  model = VGG16(include_top = True, weights = None, input_tensor=Input(shape=(224, 224, 1)))
  dense = Dense(128)(model.layers[-4].output)
  norm2 = Lambda(lambda x: tf.math.l2_normalize(x, axis = 1))(dense)
  model = Model(inputs = [model.input], outputs = [norm2])
  return model

#==============================================
base64 = "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"
facenet = FacenetModel()

image1 = load_img('model_handler/testImg.jpeg', target_size=(224, 224), color_mode= "grayscale")
image2 = load_img('model_handler/testImg2.jpeg', target_size=(224, 224), color_mode= "grayscale")

prediction1 = facenet.predict(image1)
prediction2 = facenet.predict(image2)
prediction3 = facenet.predictBase64(base64)

print(type(prediction3))
print(prediction3)
print(prediction3.shape)

dist = np.linalg.norm(prediction1-prediction2)

print(dist)
